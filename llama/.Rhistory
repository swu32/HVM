geom_point()+
#error bars +/- SEs
geom_errorbar(aes(ymin=m-se, ymax=m+se),color='black', width = .25, position=position_dodge((width=0.9))) +
#ylab
ylab("Negative Log Likelihood")+
scale_y_continuous(limits = c(0, 50), expand = c(0, 0))+
#x-lab
xlab("Group")+
#theme
theme_classic()+
#fills
scale_fill_manual(values=(c("#7F557D", "#80AA82")))+
#theme change
theme( strip.background=element_blank(), legend.key=element_rect(color=NA), legend.position="none")+ scale_x_discrete(labels=c("Control", "Variable"))+
#title
ggtitle("HCM")
phcm
library(plyr)
library("ggpubr")
se<-function(x){sd(x)/sqrt(length(x))}
AL_path = './data/simulation_data_model_transition_recall_associative_learning.csv'
dat_al<-read.csv(AL_path)
# assign train condition
dat_al$traincondition<-'ind'
for(id in unique(dat_al$ID)) {
tc <- dat_al[dat_al$ID == id & dat_al$blockcollect == 'train',]$condition[2]
dat_al[dat_al$ID == id,]$traincondition<- rep(tc, 64)
dat_al[dat_al$ID == id,]$trialcollect<-c(1:40,1:24)
}
dat_al$complexity<- -log(dat_al$recall_likelihood)
dat_al$trial<-rep((1:64),length(unique(dat_al$ID)))
dat_al<-ddply(dat_al, .(trial,traincondition), summarize, avg_complexity=mean(complexity)) # average across subjects
dpsubjects<-ddply(dat_al[dat_al$trial>40,], .(trial,traincondition), summarize, m_nll=mean(avg_complexity), se = se(avg_complexity))
dpgroups<-ddply(dpsubjects,.(traincondition), summarize, m=mean(m_nll), se=se(m_nll))
#creat plot
pal <- ggplot(dpgroups, aes(y=m, x=traincondition, fill=traincondition)) +
#show mean
stat_summary(fun = mean, geom = "bar", position = "dodge", color='black', width=0.5) +
#points
geom_point()+
#error bars +/- SEs
geom_errorbar(aes(ymin=m-se, ymax=m+se),color='black', width = .25, position=position_dodge((width=0.9))) +
#ylab
ylab("Negative Log Likelihood")+
scale_y_continuous(limits = c(0, 50), expand = c(0, 0))+
#x-lab
xlab("Group")+
#theme
theme_classic()+
#fills
scale_fill_manual(values=(c("#7F557D", "#80AA82")))+
#theme change
theme( strip.background=element_blank(), legend.key=element_rect(color=NA), legend.position="none")+ scale_x_discrete(labels=c("Control", "Variable"))+
#title
ggtitle("AL")
pal
se<-function(x){sd(x)/sqrt(length(x))}
library(plyr)
library("ggpubr")
evaluate_llm_nll_and_plot<-function(input_file_path, model_name){
dat<-read.csv(input_file_path)
# assign train condition
dat$traincondition<-'ind'
for(id in unique(dat$ID)) {
tc <- dat[dat$ID == id & dat$blockcollect == 'train',]$condition[2]
dat[dat$ID == id,]$traincondition<- rep(tc, 64)
dat[dat$ID == id,]$trialcollect<-c(1:40,1:24)
}
dat$complexity<- -log(dat$p)
dat$trial<-rep((1:64),length(unique(dat$ID)))
dat<-ddply(dat, .(trial,traincondition), summarize, avg_complexity=mean(complexity)) # average across subjects
dpsubjects<-ddply(dat[dat$trial>40,], .(trial,traincondition), summarize, m_nll=mean(avg_complexity), se = se(avg_complexity))
dpgroups<-ddply(dpsubjects,.(traincondition), summarize, m=mean(m_nll), se=se(m_nll))
TITLE <- paste(model_name)#,"Transfer Group Difference")
#creat plot
p <- ggplot(dpgroups, aes(y=m, x=traincondition, fill=traincondition)) +
#show mean
stat_summary(fun = mean, geom = "bar", position = "dodge", color='black', width=0.5) +
#points
geom_point()+
#error bars +/- SEs
geom_errorbar(aes(ymin=m-se, ymax=m+se),color='black', width = .25, position=position_dodge((width=0.9))) +
#ylab
ylab("Negative Log Likelihood")+
scale_y_continuous(limits = c(0, 50), expand = c(0, 0))+
#x-lab
xlab("Group")+
#theme
theme_classic()+
#fills
scale_fill_manual(values=(c("#7F557D", "#80AA82")))+
#theme change
theme( strip.background=element_blank(), legend.key=element_rect(color=NA), legend.position="none")+ scale_x_discrete(labels=c("Control", "Variable"))+
#title
ggtitle(TITLE)
return(p)
}
gpt2path = "./data/simulation_data_gpt2.csv"
pgpt2<-evaluate_llm_nll_and_plot(gpt2path, 'GPT2')
llama7bpath = "./data/Llama-2-7b-chat-hf.csv"
pllama7b<-evaluate_llm_nll_and_plot(llama7bpath, 'Llama-2-7b')
llama13Bpath = './data/Llama-2-13b-chat-hf.csv'
pllama13b<-evaluate_llm_nll_and_plot(llama13Bpath, 'Llama-2-13b')
llama70Bpath = './data/Llama-2-70b-chat-hf.csv'
pllama70b<-evaluate_llm_nll_and_plot(llama70Bpath, 'Llama-2-70b')
llama3_8Bpath = './data/Meta-Llama-3-8B.csv'
pllama3_8b<-evaluate_llm_nll_and_plot(llama3_8Bpath, 'Llama-3-8b')
llama3_70Bpath = './data/Meta-Llama-3-70B.csv'
pllama3_70b<-evaluate_llm_nll_and_plot(llama3_70Bpath, 'Llama-3-70b')
dat_a<-read.csv('./data/human_data.csv')
dat_a_test <-dat_a[dat_a$blockcollect == 'test' & dat_a$timecollect <= 20000,]
da<-ddply(dat_a_test, .(trialcollect,traincondition), summarize, m_rt=mean(timecollect), se=se(timecollect))
se<-function(x){sd(x)/sqrt(length(x))}
dpgroups<-ddply(da,.(traincondition), summarize, m=mean(m_rt), se=se(m_rt))
TITLE <- paste("Human","Transfer Group Difference")
#creat plot
phuman <- ggplot(dpgroups, aes(y=m, x=traincondition, fill=traincondition)) +
#show mean
stat_summary(fun = mean, geom = "bar", position = "dodge", color='black', width=0.5) +
#points
geom_point()+
#error bars +/- SEs
geom_errorbar(aes(ymin=m-se, ymax=m+se),color='black', width = .25, position=position_dodge((width=0.9))) +
#ylab
ylab("Reaction Time")+
scale_y_continuous(limits = c(0, 9000), expand = c(0, 0))+
#x-lab
xlab("Group")+
#theme
theme_classic()+
#fills
scale_fill_manual(values=(c("#7F557D", "#80AA82")))+
#theme change
theme( strip.background=element_blank(), legend.key=element_rect(color=NA), legend.position="none")+ scale_x_discrete(labels=c("Control", "Variable"))+
#title
ggtitle('Human')                      # Export ggplot2 plot
library(patchwork)
patchwork<-(pgpt2 | pllama7b | pllama13b | pllama70b | pllama3_8b)+ plot_layout(nrow = 1) +  plot_annotation(tag_levels = 'a')
patchwork & theme(text = element_text(size=16))
library(patchwork)
patchwork<-(phuman | pal | phcm | phvm | pgpt2 | pllama7b | pllama13b | pllama70b | pllama3_8b | pllama3_70b)+ plot_layout(nrow = 1) +  plot_annotation(tag_levels = 'a')
patchwork & theme(text = element_text(size=14))
dat_subj<-read.csv('./data/human_data.csv')
dat_subj$trial<-rep((1:64),length(unique(dat_subj$ID)))
empirical_rt<-ddply(dat_subj, .(trial,condition), summarize, m=mean(timecollect))
empirical_rt <- empirical_rt[empirical_rt$trial<=40,]$m
dat_normal<-read.csv('./data/simulation_data_model_transition_recall.csv')
dat_normal$complexity<- -log(dat_normal$p)
dat_normal$trial<-rep((1:64),length(unique(dat_normal$ID)))
dat_normal<-ddply(dat_normal, .(trial,condition), summarize, m=mean(complexity))
motif_learning <- dat_normal[dat_normal$trial<=40,]$m
dat_associative_learning<-read.csv('./data/simulation_data_model_transition_recall_associative_learning.csv')
dat_associative_learning$complexity<- -log(dat_associative_learning$recall_likelihood)
dat_associative_learning$trial<-rep((1:64),length(unique(dat_associative_learning$ID)))
dat_associative_learning<-ddply(dat_associative_learning, .(trial,condition), summarize, m=mean(complexity))
associative_learning<-dat_associative_learning[dat_associative_learning$trial<=40,]$m
dat_projectional_lesioned<-read.csv('./data/simulation_data_model_transition_recall_leison_variable_motif_theta=0.9.csv')
dat_projectional_lesioned$complexity<- -log(dat_projectional_lesioned$recall_likelihood)
dat_projectional_lesioned$trial<-rep((1:64),length(unique(dat_projectional_lesioned$ID)))
dat_projectional_lesioned<-ddply(dat_projectional_lesioned, .(trial,condition), summarize, m=mean(complexity))
sequence_learning<-dat_projectional_lesioned[dat_projectional_lesioned$trial<=40,]$m
dat_gpt2<-read.csv("./data/simulation_data_gpt2.csv")
dat_gpt2$complexity<- -log(dat_gpt2$p)
dat_gpt2$trial<-rep((1:64),length(unique(dat_gpt2$ID)))
dat_gpt2<-ddply(dat_gpt2, .(trial,condition), summarize, m=mean(complexity))
gpt2_learning<-dat_gpt2[dat_gpt2$trial<=40,]$m
dat_lama7B<-read.csv('./data/Llama-2-7b-chat-hf.csv')
dat_lama7B$complexity<- -log(dat_lama7B$p)
dat_lama7B$trial<-rep((1:64),length(unique(dat_lama7B$ID)))
dat_lama7B<-ddply(dat_lama7B, .(trial,condition), summarize, m=mean(complexity))
lama7b_learning<-dat_lama7B[dat_lama7B$trial<=40,]$m
dat_lama13B<-read.csv('./data/Llama-2-13b-chat-hf.csv')
dat_lama13B$complexity<- -log(dat_lama13B$p)
dat_lama13B$trial<-rep((1:64),length(unique(dat_lama13B$ID)))
dat_lama13B<-ddply(dat_lama13B, .(trial,condition), summarize, m=mean(complexity))
lama13b_learning<-dat_lama13B[dat_lama13B$trial<=40,]$m
dat_lama70B<-read.csv('./data/Llama-2-70b-chat-hf.csv')
dat_lama70B$complexity<- -log(dat_lama70B$p)
dat_lama70B$trial<-rep((1:64),length(unique(dat_lama70B$ID)))
dat_lama70B<-ddply(dat_lama70B, .(trial,condition), summarize, m=mean(complexity))
lama70b_learning<-dat_lama70B[dat_lama70B$trial<=40,]$m
dfmc<-data.frame(empirical_rt,motif_learning,associative_learning,sequence_learning, gpt2_learning, lama7b_learning, lama13b_learning,lama70b_learning)
model <- lm(empirical_rt~motif_learning, data=dfmc)
RSmotiflearning<- summary(model)$r.squared
model <- lm(empirical_rt~associative_learning, data=dfmc)
RSassociative_learning<- summary(model)$r.squared
model <- lm(empirical_rt~sequence_learning, data=dfmc)
RSsequence_learning<- summary(model)$r.squared
model <- lm(empirical_rt~gpt2_learning, data=dfmc)
RSgpt2<- summary(model)$r.squared
model <- lm(empirical_rt~lama7b_learning, data=dfmc)
RSlama7B<- summary(model)$r.squared
model <- lm(empirical_rt~lama13b_learning, data=dfmc)
RSlama13B<- summary(model)$r.squared
model <- lm(empirical_rt~lama70b_learning, data=dfmc)
RSlama70B<- summary(model)$r.squared
# Create data
modelcomparison <- data.frame(
name=c("HVM","AL","HCM",'GPT2', 'Llama7B','Llama13B', 'Llama70B') ,
value=c(RSmotiflearning,RSassociative_learning,RSsequence_learning, RSgpt2, RSlama7B, RSlama13B, RSlama70B))
#creat plot
p8 <- ggplot(modelcomparison, aes(y=value, x=reorder(name,+value))) +
#show mean
stat_summary(fun = mean, geom = "bar", position = "dodge", color='black', width=0.5) +
#points
geom_point()+
#error bars +/- SEs
scale_y_continuous(expand = c(0, 0))+
#ylab
ylab("R-Squared")+
#x-lab
xlab("Model")+
#theme
theme_classic()+
#theme change
ggtitle("Training")+
# Additional theme settings
theme(strip.background = element_blank(),
legend.key = element_rect(color = NA),
legend.position = "none",
plot.title = element_text(size = 14),  # Increase plot title font size
axis.title = element_text(size = 14),  # Increase axis titles font size
axis.text = element_text(size = 14),
axis.text.x = element_text()) # Adjust x axis text, if needed
p8
dat_subj<-read.csv('./data/human_data.csv')
dat_subj$trial<-rep((1:64),length(unique(dat_subj$ID)))
empirical_rt<-ddply(dat_subj, .(trial,condition), summarize, m=mean(timecollect))
empirical_rt <- empirical_rt[empirical_rt$trial>40,]$m
dat_normal<-read.csv('./data/simulation_data_model_transition_recall.csv')
dat_normal$complexity<- -log(dat_normal$p)
dat_normal$trial<-rep((1:64),length(unique(dat_normal$ID)))
dat_normal<-ddply(dat_normal, .(trial,condition), summarize, m=mean(complexity))
motif_learning <- dat_normal[dat_normal$trial>40,]$m
dat_associative_learning<-read.csv('./data/simulation_data_model_transition_recall_associative_learning.csv')
dat_associative_learning$complexity<- -log(dat_associative_learning$recall_likelihood)
dat_associative_learning$trial<-rep((1:64),length(unique(dat_associative_learning$ID)))
dat_associative_learning<-ddply(dat_associative_learning, .(trial,condition), summarize, m=mean(complexity))
associative_learning<-dat_associative_learning[dat_associative_learning$trial>40,]$m
dat_projectional_lesioned<-read.csv('./data/simulation_data_model_transition_recall_leison_variable_motif_theta=0.9.csv')
dat_projectional_lesioned$complexity<- -log(dat_projectional_lesioned$recall_likelihood)
dat_projectional_lesioned$trial<-rep((1:64),length(unique(dat_projectional_lesioned$ID)))
dat_projectional_lesioned<-ddply(dat_projectional_lesioned, .(trial,condition), summarize, m=mean(complexity))
sequence_learning<-dat_projectional_lesioned[dat_projectional_lesioned$trial>40,]$m
dat_gpt2<-read.csv("./data/simulation_data_gpt2.csv")
dat_gpt2$complexity<- -log(dat_gpt2$p)
dat_gpt2$trial<-rep((1:64),length(unique(dat_gpt2$ID)))
dat_gpt2<-ddply(dat_gpt2, .(trial,condition), summarize, m=mean(complexity))
gpt2_learning<-dat_gpt2[dat_gpt2$trial>40,]$m
dat_lama7B<-read.csv('./data/Llama-2-7b-chat-hf.csv')
dat_lama7B$complexity<- -log(dat_lama7B$p)
dat_lama7B$trial<-rep((1:64),length(unique(dat_lama7B$ID)))
dat_lama7B<-ddply(dat_lama7B, .(trial,condition), summarize, m=mean(complexity))
lama7b_learning<-dat_lama7B[dat_lama7B$trial>40,]$m
dat_lama13B<-read.csv('./data/Llama-2-13b-chat-hf.csv')
dat_lama13B$complexity<- -log(dat_lama13B$p)
dat_lama13B$trial<-rep((1:64),length(unique(dat_lama13B$ID)))
dat_lama13B<-ddply(dat_lama13B, .(trial,condition), summarize, m=mean(complexity))
lama13b_learning<-dat_lama13B[dat_lama13B$trial>40,]$m
dat_lama70B<-read.csv('./data/Llama-2-13b-chat-hf.csv')
dat_lama70B$complexity<- -log(dat_lama70B$p)
dat_lama70B$trial<-rep((1:64),length(unique(dat_lama70B$ID)))
dat_lama70B<-ddply(dat_lama70B, .(trial,condition), summarize, m=mean(complexity))
lama70b_learning<-dat_lama70B[dat_lama70B$trial>40,]$m
dfmc<-data.frame(empirical_rt,motif_learning,associative_learning,sequence_learning, gpt2_learning,lama7b_learning,lama13b_learning)
model <- lm(empirical_rt~motif_learning, data=dfmc)
RSmotiflearning<- summary(model)$r.squared
model <- lm(empirical_rt~associative_learning, data=dfmc)
RSassociative_learning<- summary(model)$r.squared
model <- lm(empirical_rt~sequence_learning, data=dfmc)
RSsequence_learning<- summary(model)$r.squared
model <- lm(empirical_rt~gpt2_learning, data=dfmc)
RSgpt2<- summary(model)$r.squared
model <- lm(empirical_rt~lama7b_learning, data=dfmc)
RSlama7B<- summary(model)$r.squared
model <- lm(empirical_rt~lama13b_learning, data=dfmc)
RSlama13B<- summary(model)$r.squared
model <- lm(empirical_rt~lama70b_learning, data=dfmc)
RSlama70B<- summary(model)$r.squared
# Create data
modelcomparison <- data.frame(
name=c("HVM","AL","HCM",'GPT2', 'Llama7B',  'Llama13B','Llama70B') ,
value=c(RSmotiflearning,RSassociative_learning,RSsequence_learning, RSgpt2, RSlama7B, RSlama13B, RSlama70B))
#creat plot
p8 <- ggplot(modelcomparison, aes(y=value, x=reorder(name,+value))) +
#show mean
stat_summary(fun = mean, geom = "bar", position = "dodge", color='black', width=0.5) +
#points
geom_point()+
#error bars +/- SEs
scale_y_continuous(expand = c(0, 0))+
#ylab
ylab("R-Squared")+
#x-lab
xlab("Model")+
#theme
theme_classic()+
#theme change
ggtitle("Transfer") +
# Additional theme settings
theme(strip.background = element_blank(),
legend.key = element_rect(color = NA),
legend.position = "none",        plot.title = element_text(size = 14),  # Increase plot title font size
axis.title = element_text(size = 14),  # Increase axis titles font size
axis.text = element_text(size = 14),
axis.text.x = element_text()) # Adjust x axis text, if needed
p8
library(plyr)
library("ggpubr")
library(lmerTest)
se<-function(x){sd(x)/sqrt(length(x))}
HVM_path = './data/simulation_data_model_transition_recall.csv'
HCM_path = './data/simulation_data_model_transition_recall_leison_variable_motif.csv'
AL_path = './data/simulation_data_model_transition_recall_associative_learning.csv'
dat_hvm<-read.csv(HVM_path)
dat_hvm$traincondition<-'ind'
for(id in unique(dat_hvm$ID)) {
tc <- dat_hvm[dat_hvm$ID == id & dat_hvm$blockcollect == 'train',]$condition[2]
dat_hvm[dat_hvm$ID == id,]$traincondition<- rep(tc, 64)
dat_hvm[dat_hvm$ID == id,]$trialcollect<-c(1:40,1:24)
}
dat_hvm$complexity<- -log(dat_hvm$p)
# need to segregate them into two models
dat_hvm$trial<-rep((1:64),length(unique(dat_hvm$ID)))
dpsubjects<-ddply(dat_hvm[dat_hvm$trial>40,], .(trial,traincondition), summarize, m_nll=mean(complexity), se = se(complexity))
dpgroups<-ddply(dpsubjects,.(traincondition), summarize, m=mean(m_nll), se=se(m_nll))
#creat plot
phvm <- ggplot(dpgroups, aes(y=m, x=traincondition, fill=traincondition)) +
#show mean
stat_summary(fun = mean, geom = "bar", position = "dodge", color='black', width=0.5) +
#points
geom_point()+
#error bars +/- SEs
geom_errorbar(aes(ymin=m-se, ymax=m+se),color='black', width = .25, position=position_dodge((width=0.9))) +
scale_y_continuous(limits = c(0, 50), expand = c(0, 0))+
#ylab
ylab("Negative Log Likelihood")+
#x-lab
xlab("Group")+
#theme
theme_classic()+
#fills
scale_fill_manual(values=(c("#7F557D", "#80AA82")))+
#theme change
theme( strip.background=element_blank(), legend.key=element_rect(color=NA), legend.position="none")+ scale_x_discrete(labels=c("Control", "Variable"))+
# #title
ggtitle("HVM")
phvm
library(plyr)
library("ggpubr")
se<-function(x){sd(x)/sqrt(length(x))}
HCM_path = './data/simulation_data_model_transition_recall_leison_variable_motif.csv'
dat_HCM<-read.csv(HCM_path)
# assign train condition
dat_HCM$traincondition<-'ind'
for(id in unique(dat_HCM$ID)) {
tc <- dat_hvm[dat_HCM$ID == id & dat_HCM$blockcollect == 'train',]$condition[2]
dat_HCM[dat_HCM$ID == id,]$traincondition<- rep(tc, 64)
dat_HCM[dat_HCM$ID == id,]$trialcollect<-c(1:40,1:24)
}
dat_HCM$complexity<- -log(dat_HCM$recall_likelihood)
dat_HCM$trial<-rep((1:64),length(unique(dat_HCM$ID)))
dat_HCM<-ddply(dat_HCM, .(trial,traincondition), summarize, avg_complexity=mean(complexity)) # average across subjects
dpsubjects<-ddply(dat_HCM[dat_HCM$trial>40,], .(trial,traincondition), summarize, m_nll=mean(avg_complexity), se = se(avg_complexity))
dpgroups<-ddply(dpsubjects,.(traincondition), summarize, m=mean(m_nll), se=se(m_nll))
#creat plot
phcm <- ggplot(dpgroups, aes(y=m, x=traincondition, fill=traincondition)) +
#show mean
stat_summary(fun = mean, geom = "bar", position = "dodge", color='black', width=0.5) +
#points
geom_point()+
#error bars +/- SEs
geom_errorbar(aes(ymin=m-se, ymax=m+se),color='black', width = .25, position=position_dodge((width=0.9))) +
#ylab
ylab("Negative Log Likelihood")+
scale_y_continuous(limits = c(0, 50), expand = c(0, 0))+
#x-lab
xlab("Group")+
#theme
theme_classic()+
#fills
scale_fill_manual(values=(c("#7F557D", "#80AA82")))+
#theme change
theme( strip.background=element_blank(), legend.key=element_rect(color=NA), legend.position="none")+ scale_x_discrete(labels=c("Control", "Variable"))+
#title
ggtitle("HCM")
phcm
library(plyr)
library("ggpubr")
se<-function(x){sd(x)/sqrt(length(x))}
AL_path = './data/simulation_data_model_transition_recall_associative_learning.csv'
dat_al<-read.csv(AL_path)
# assign train condition
dat_al$traincondition<-'ind'
for(id in unique(dat_al$ID)) {
tc <- dat_al[dat_al$ID == id & dat_al$blockcollect == 'train',]$condition[2]
dat_al[dat_al$ID == id,]$traincondition<- rep(tc, 64)
dat_al[dat_al$ID == id,]$trialcollect<-c(1:40,1:24)
}
dat_al$complexity<- -log(dat_al$recall_likelihood)
dat_al$trial<-rep((1:64),length(unique(dat_al$ID)))
dat_al<-ddply(dat_al, .(trial,traincondition), summarize, avg_complexity=mean(complexity)) # average across subjects
dpsubjects<-ddply(dat_al[dat_al$trial>40,], .(trial,traincondition), summarize, m_nll=mean(avg_complexity), se = se(avg_complexity))
dpgroups<-ddply(dpsubjects,.(traincondition), summarize, m=mean(m_nll), se=se(m_nll))
#creat plot
pal <- ggplot(dpgroups, aes(y=m, x=traincondition, fill=traincondition)) +
#show mean
stat_summary(fun = mean, geom = "bar", position = "dodge", color='black', width=0.5) +
#points
geom_point()+
#error bars +/- SEs
geom_errorbar(aes(ymin=m-se, ymax=m+se),color='black', width = .25, position=position_dodge((width=0.9))) +
#ylab
ylab("Negative Log Likelihood")+
scale_y_continuous(limits = c(0, 50), expand = c(0, 0))+
#x-lab
xlab("Group")+
#theme
theme_classic()+
#fills
scale_fill_manual(values=(c("#7F557D", "#80AA82")))+
#theme change
theme( strip.background=element_blank(), legend.key=element_rect(color=NA), legend.position="none")+ scale_x_discrete(labels=c("Control", "Variable"))+
#title
ggtitle("AL")
pal
se<-function(x){sd(x)/sqrt(length(x))}
library(plyr)
library("ggpubr")
evaluate_llm_nll_and_plot<-function(input_file_path, model_name){
dat<-read.csv(input_file_path)
# assign train condition
dat$traincondition<-'ind'
for(id in unique(dat$ID)) {
tc <- dat[dat$ID == id & dat$blockcollect == 'train',]$condition[2]
dat[dat$ID == id,]$traincondition<- rep(tc, 64)
dat[dat$ID == id,]$trialcollect<-c(1:40,1:24)
}
dat$complexity<- -log(dat$p)
dat$trial<-rep((1:64),length(unique(dat$ID)))
dat<-ddply(dat, .(trial,traincondition), summarize, avg_complexity=mean(complexity)) # average across subjects
dpsubjects<-ddply(dat[dat$trial>40,], .(trial,traincondition), summarize, m_nll=mean(avg_complexity), se = se(avg_complexity))
dpgroups<-ddply(dpsubjects,.(traincondition), summarize, m=mean(m_nll), se=se(m_nll))
TITLE <- paste(model_name)#,"Transfer Group Difference")
#creat plot
p <- ggplot(dpgroups, aes(y=m, x=traincondition, fill=traincondition)) +
#show mean
stat_summary(fun = mean, geom = "bar", position = "dodge", color='black', width=0.5) +
#points
geom_point()+
#error bars +/- SEs
geom_errorbar(aes(ymin=m-se, ymax=m+se),color='black', width = .25, position=position_dodge((width=0.9))) +
#ylab
ylab("Negative Log Likelihood")+
scale_y_continuous(limits = c(0, 50), expand = c(0, 0))+
#x-lab
xlab("Group")+
#theme
theme_classic()+
#fills
scale_fill_manual(values=(c("#7F557D", "#80AA82")))+
#theme change
theme( strip.background=element_blank(), legend.key=element_rect(color=NA), legend.position="none")+ scale_x_discrete(labels=c("Control", "Variable"))+
#title
ggtitle(TITLE)
return(p)
}
gpt2path = "./data/simulation_data_gpt2.csv"
pgpt2<-evaluate_llm_nll_and_plot(gpt2path, 'GPT2')
llama7bpath = "./data/Llama-2-7b-chat-hf.csv"
pllama7b<-evaluate_llm_nll_and_plot(llama7bpath, 'Llama-2-7b')
llama13Bpath = './data/Llama-2-13b-chat-hf.csv'
pllama13b<-evaluate_llm_nll_and_plot(llama13Bpath, 'Llama-2-13b')
llama70Bpath = './data/Llama-2-70b-chat-hf.csv'
pllama70b<-evaluate_llm_nll_and_plot(llama70Bpath, 'Llama-2-70b')
llama3_8Bpath = './data/Meta-Llama-3-8B.csv'
pllama3_8b<-evaluate_llm_nll_and_plot(llama3_8Bpath, 'Llama-3-8b')
llama3_70Bpath = './data/Meta-Llama-3-70B.csv'
pllama3_70b<-evaluate_llm_nll_and_plot(llama3_70Bpath, 'Llama-3-70b')
dat_a<-read.csv('./data/human_data.csv')
dat_a_test <-dat_a[dat_a$blockcollect == 'test' & dat_a$timecollect <= 20000,]
da<-ddply(dat_a_test, .(trialcollect,traincondition), summarize, m_rt=mean(timecollect), se=se(timecollect))
se<-function(x){sd(x)/sqrt(length(x))}
dpgroups<-ddply(da,.(traincondition), summarize, m=mean(m_rt), se=se(m_rt))
TITLE <- paste("Human","Transfer Group Difference")
#creat plot
phuman <- ggplot(dpgroups, aes(y=m, x=traincondition, fill=traincondition)) +
#show mean
stat_summary(fun = mean, geom = "bar", position = "dodge", color='black', width=0.5) +
#points
geom_point()+
#error bars +/- SEs
geom_errorbar(aes(ymin=m-se, ymax=m+se),color='black', width = .25, position=position_dodge((width=0.9))) +
#ylab
ylab("Reaction Time")+
scale_y_continuous(limits = c(0, 9000), expand = c(0, 0))+
#x-lab
xlab("Group")+
#theme
theme_classic()+
#fills
scale_fill_manual(values=(c("#7F557D", "#80AA82")))+
#theme change
theme( strip.background=element_blank(), legend.key=element_rect(color=NA), legend.position="none")+ scale_x_discrete(labels=c("Control", "Variable"))+
#title
ggtitle('Human')                      # Export ggplot2 plot
library(patchwork)
patchwork<-(pgpt2 | pllama7b | pllama13b | pllama70b | pllama3_8b)+ plot_layout(nrow = 1) +  plot_annotation(tag_levels = 'a')
patchwork & theme(text = element_text(size=16))
library(patchwork)
patchwork<-(phuman | pal | phcm | phvm | pgpt2 | pllama7b | pllama13b | pllama70b | pllama3_8b | pllama3_70b)+ plot_layout(nrow = 1) +  plot_annotation(tag_levels = 'a')
patchwork & theme(text = element_text(size=14))
